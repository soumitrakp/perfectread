#! /usr/bin/env perl

use strict;
use warnings;
use Getopt::Long;
use File::Basename;

my $dir = dirname(__FILE__);

# Compile time settings
my $JELLYFISH       = "/home/mitra/tools/jellyfish-2.1.4";
my $JF_LIB_PATH     = $JELLYFISH."/.lib";
my $CDB             = $JELLYFISH."/bin/jellyfish";
my $EC              = $dir."/perfectread.bin";
my $PACKAGE_VERSION = "0.0.1";

# Command line switches
my $jf_size      = "200M";
my $buff_size    = "1024";
my $klen         = 24;
my $good_qual    = 45;
my $excel_qual   = 71;
my $good_count   = 1;
my $excel_count  = 8;
my $nb_threads;
my %opts;
my @switches = qw(min-count skip good anchor-count window error contaminant trim-contaminant homo-trim);
my ($help, $debug, $version);

my $usage = <<EOS;
$0 [options] .fastq [.fastq]+
    
Run the perfect read detector on the given fastq file.

Options:
 -s, --size              Mer database size (default $jf_size)
 -b, --buffer-size       Read buffer size (default $buff_size)
 -t, --threads           Number of threads (default number of cpus)
 -k, --kmer-len          Kmer length (default $klen)
 -Q, --good-qual         Good quality ($good_qual)
 -q, --excel-qual        Excellent quality ($excel_qual)
 -C, --good-count        Good quality ($good_count)
 -c, --excel-count       Excellent quality ($excel_count)
     --version           Display version
 -d, --debug             Print debug messages
 -h, --help              This message
EOS
    ; # Make emacs happy

GetOptions("s|size=s"         => \$jf_size,
           "b|buffer-size=i"  => \$buff_size,
           "t|threads=i"      => \$nb_threads,
           "k|klen=i"         => \$klen,
           "Q|good-qual=i"    => \$good_qual,
           "q|excel-qual=i"   => \$excel_qual,
           "C|good-count=i"   => \$good_count,
           "c|excel-count=i"  => \$excel_count,
           "version"          => \$version,
           "d|debug"          => \$debug,
           "h|help"           => \$help) or die $usage;
if($help) {
  print($usage);
  exit(0);
}
if($version) {
  print($PACKAGE_VERSION, "\n");
  exit(0);
}
if($jf_size !~ /^\d+[kMGT]?$/) {
  print STDERR "Invalid size '$jf_size'. It must be a number, maybe followed by a suffix (like k, M, G for thousand, million and billion).\n";
  exit(1);
}
if(!@ARGV) {
  print STDERR "No sequence files. See $0 --help.\n";
  exit(1);
}

# Export LD_LIBRARY_PATH if needed
if($JF_LIB_PATH) {
  if($ENV{"LD_LIBRARY_PATH"}) {
    $ENV{"LD_LIBRARY_PATH"} = $JF_LIB_PATH . ":" . $ENV{"LD_LIBRARY_PATH"};
  } else {
    $ENV{"LD_LIBRARY_PATH"} = $JF_LIB_PATH;
  }
}

# Detect number of CPUs
if(!defined($nb_threads)) {
  if(-f "/proc/cpuinfo") {
    $nb_threads = `grep -c '^processor' /proc/cpuinfo`;
  } else {
    $nb_threads = `sysctl -n hw.cpu`;
  }
  chomp($nb_threads) if defined($nb_threads);
}
defined($nb_threads) or
    die "Can't detect the number of CPUs. Set number of threads with -t option";

sub run {
  print(STDERR "+ @_\n") if($debug);
  my $ret = system(@_);
  die "Failed to exec '$_[0]': $!" if $ret == -1;
  return $ret;
}

my $db_file = "perfectread_mer_database.jf";
run($CDB, "count", "-s", $jf_size, "-m", $klen, "-t", $nb_threads,
    "-Q", chr($excel_qual), "-C", "-o", $db_file,
    @ARGV) == 0 or
    die "Creating the mer database failed. Most likely the size passed to the -s switch is too small.";

my @ec_cmd = ($EC, "-t", $nb_threads, "-s", $buff_size,
  "-d", $db_file, "-Q", $good_qual, "-q", $excel_qual,
  "-C", $good_count, "-c", $excel_count);
#for my $s (@switches) {
#  push(@ec_cmd, "--" . $s, $opts{$s}) if defined($opts{$s});
#}
run(@ec_cmd, @ARGV) == 0 or
    die "Perfectread failed";
